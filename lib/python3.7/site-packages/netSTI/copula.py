import numpy as np
from scipy import stats
import netSTI.mydata as data


class Copula:
	def __init__(self, Npop, graph, independent = False):
		self.Npop = Npop
		corrcoef = 0
		if independent == False: 
			if graph == 'power_law': 
				corrcoef = -0.33
			if graph in ['random', 'community']: 
				corrcoef = -0.15
			if graph == 'empirical': 
				corrcoef = -0.17
		self.corrcoef = corrcoef
		mvnorm = stats.multivariate_normal(mean=[0, 0], 
			cov=[[1., self.corrcoef], [self.corrcoef, 1.]])
		x = mvnorm.rvs(self.Npop)
		norm = stats.norm()
		self.x_unif = norm.cdf(x)	 


class CopulaDist(Copula): 
	def __init__(self, Npop, graph, independent = False): 
		super().__init__(Npop, graph, independent)

	def get_avg_duration(self): 
		x2_cdf = np.cumsum(data.SexBehavior().dur_dist)
		dum_mat = (np.tile(x2_cdf, (self.x_unif.shape[0], 1)) <= np.tile(self.x_unif[:, 1], (x2_cdf.shape[0], 1)).T) * \
			np.tile(np.arange(x2_cdf.shape[0]), (self.x_unif.shape[0], 1))
		return np.max(dum_mat, axis = 1) + 1

	def get_degree_power_law(self): 
		x1_cdf = np.cumsum(data.PowerLawDD().plDist5yr)
		x1_nPart = data.PowerLawDD().nPart5yr
		dum_mat = (np.tile(x1_cdf, (self.x_unif.shape[0], 1)) <= np.tile(self.x_unif[:, 0], (x1_cdf.shape[0], 1)).T) * \
			np.tile(np.arange(x1_cdf.shape[0]), (self.x_unif.shape[0], 1))
		x1_trans = np.max(dum_mat, axis = 1) + 1
		return x1_nPart[x1_trans]

	def get_degree_poisson(self, Ndegree): 
		m1 = stats.poisson(Ndegree)
		x1_trans = m1.ppf(self.x_unif[:, 0])
		return x1_trans		

	def get_dd_empirical(self, n_yrs): 
		tmp_dd = data.SexBehavior().degree_dist
		tmp_d = data.SexBehavior().degree
		year_d = np.random.choice(tmp_d, p = tmp_dd, size = (self.Npop, n_yrs))
		# year_d = np.random.choice(tmp_d, p = tmp_dd, size = (Npop, n_yrs))
		cum_d = np.sum(year_d, axis = 1)
		# print(np.mean(cum_d))

		tmp_d, tmp_count = np.unique(cum_d, return_counts = True)
		tmp_dd = tmp_count / np.sum(tmp_count)
		dd_vec = np.zeros(251)
		dd_vec[tmp_d] = tmp_dd

		x1_cdf = np.cumsum(dd_vec)
		x1_nPart = np.arange(251)
		dum_mat = (np.tile(x1_cdf, (self.x_unif.shape[0], 1)) <= np.tile(self.x_unif[:, 0], (x1_cdf.shape[0], 1)).T) * \
			np.tile(np.arange(x1_cdf.shape[0]), (self.x_unif.shape[0], 1))
		# dum_mat = (np.tile(x1_cdf, (g.x_unif.shape[0], 1)) <= np.tile(g.x_unif[:, 0], (x1_cdf.shape[0], 1)).T) * \
		# 	np.tile(np.arange(x1_cdf.shape[0]), (g.x_unif.shape[0], 1))
		x1_trans = np.max(dum_mat, axis = 1) + 1
		return x1_nPart[x1_trans]

'''
import seaborn as sns
import matplotlib as mpl
print(mpl.rcParams['backend'])
mpl.use('TkAgg')
import matplotlib.pyplot as plt
plt.get_backend()
import os
os.chdir("/Users/szu-yukao/Documents/Network_structure_and_STI/networkSTI")
cwd = os.getcwd()
print(cwd)

h = sns.jointplot(x1_trans, x2_trans, kind='kde', stat_func=None);
h.set_axis_labels('# of partners', 'duration of relationship', fontsize=12)
plt.savefig('results/copula.eps', format='eps', dpi=1000)
'''

