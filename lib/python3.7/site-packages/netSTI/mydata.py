import numpy as np

class PowerLawDD:
	'''
	Get base case data used in the model
	'''
	def __init__(self): 
		self.nPart = np.arange(1, 251)
		self.plDist = np.array([0.172177071738765, 0.0849033295563347, 0.0561450712841286, 
			0.0418672201644175, 0.0333446307842469, 0.0276860527482593, 0.0236578523260089, 
			0.0206454108861862, 0.0183082973689008, 0.0164427826993402, 0.0149195175110945, 
			0.0136524453393308, 0.0125820989999687, 0.0116660738409921, 0.0108733215951365, 
			0.01018058970683, 0.00957012075221169, 0.00902812081439985, 0.00854371286782117, 
			0.00810820502548343, 0.00771456844897717, 0.00735705805235139, 0.00703093243694124, 
			0.00673224404497797, 0.00645767982292506, 0.00620443876247115, 0.00597013673474228, 
			0.00575273177751045, 0.00555046488615941, 0.00536181268179878, 0.00518544926783666, 
			0.00502021525995211, 0.00486509246397301, 0.00471918303589088, 0.00458169222529177, 
			0.00445191400363917, 0.00432921903022058, 0.00421304452402299, 0.00410288569856166, 
			0.00399828848543458, 0.00389884332600371, 0.00380417985271695, 0.00371396231486687, 
			0.00362788563004258, 0.00354567196368892, 0.00346706775619732, 0.00339184113069888, 
			0.00331977962589397, 0.00325068820736153, 0.00318438751825779, 0.00312071233645954, 
			0.00305951021028768, 0.00300064024916199, 0.00294397204905002, 0.00288938473550858, 
			0.00283676610957951, 0.0027860118838747, 0.00273702499793621, 0.00268971500344083, 
			0.0026439975110786, 0.00259979369200894, 0.00255702982771583, 0.00251563690286988, 
			0.0024755502364807, 0.00243670914720487, 0.00239905664917718, 0.00236253917516754, 
			0.00232710632424292, 0.00229271063144164, 0.00225930735725285, 0.00222685429494311, 
			0.00219531159399046, 0.00216464159807701, 0.00213480869625928, 0.00210577918608297, 
			0.00207752114753907, 0.00205000432687292, 0.0020232000293598, 0.00199708102025007, 
			0.0019716214331674, 0.00194679668531401, 0.00192258339890026, 0.00189895932827241, 
			0.00187590329226209, 0.00185339511132661, 0.00183141554908878, 0.00180994625792158, 
			0.00178896972825474, 0.00176846924131005, 0.0017484288249976, 0.00172883321272948, 
			0.0017096678049281, 0.00169091863302594, 0.00167257232577049, 0.00165461607766427, 
			0.00163703761938368, 0.00161982519003345, 0.00160296751110542, 0.00158645376202052, 
			0.00157027355714314, 0.00155441692416522, 0.00153887428376614, 0.00152363643046118, 
			0.00150869451455853, 0.00149404002515061, 0.00147966477407133, 0.00146556088075575, 
			0.00145172075794373, 0.00143813709817296, 0.00142480286101123, 0.00141171126098095, 
			0.00139885575613285, 0.00138623003722817, 0.00137382801749219, 0.00136164382290401, 
			0.00134967178299028, 0.00133790642209251, 0.00132634245107991, 0.00131497475948142, 
			0.00130379840801238, 0.00129280862147303, 0.00128200078199737, 0.00127137042263243, 
			0.00126091322122918, 0.00125062499462776, 0.00124050169312033, 0.0012305393951765, 
			0.00122073430241677, 0.00121108273482049, 0.00120158112615578, 0.00119222601961939, 
			0.00118301406367539, 0.00117394200808229, 0.0011650067000985, 0.00115620508085706, 
			0.00114753418190085, 0.00113899112186997, 0.00113057310333369, 0.0011222774097595, 
			0.00111410140261261, 0.00110604251857916, 0.0010980982669072, 0.0010902662268596, 
			0.00108254404527342, 0.00107492943422061, 0.00106742016876516, 0.00106001408481207, 
			0.00105270907704386, 0.00104550309694041, 0.00103839415087822, 0.00103138029830556, 
			0.0010244596499898, 0.00101763036633368, 0.00101089065575749, 0.00100423877314396, 
			0.000997673018343277, 0.000991191734735336, 0.00098479330784679, 0.000978476164020475, 
			0.000972238769134881, 0.000966079627371497, 0.000959997280027971, 0.00095399030437509, 
			0.000948057312555721, 0.000942196950523916, 0.000936407897022495, 0.000930688862597474, 
			0.000925038588647819, 0.000919455846509034, 0.000913939436569205, 0.000908488187416168, 
			0.000903100955014511, 0.000897776621911221, 0.000892514096468815, 0.000887312312124842, 
			0.000882170226676713, 0.000877086821590864, 0.000872061101335266, 0.000867092092734395, 
			0.000862178844345766, 0.000857320425857208, 0.000852515927504069, 0.000847764459505591, 
			0.000843065151519734, 0.000838417152115726, 0.000833819628263692, 0.000829271764840712, 
			0.000824772764152688, 0.000820321845471449, 0.000815918244586516, 0.000811561213370992, 
			0.000807250019361069, 0.000802983945348644, 0.000798762288986581, 0.000794584362406154, 
			0.000790449491846242, 0.000786357017293854, 0.000782306292135582, 0.000778296682819603, 
			0.000774327568527842, 0.000770398340857969, 0.000766508403514858, 0.000762657172011206, 
			0.000758844073376981, 0.000755068545877404, 0.00075133003873917, 0.000747628011884632, 
			0.000743961935673678, 0.000740331290653044, 0.000736735567312809, 0.000733174265849841, 
			0.00072964689593796, 0.000726152976504591, 0.000722692035513706, 0.000719263609754842, 
			0.000715867244637996, 0.000712502493994212, 0.000709168919881677, 0.000705866092397137, 
			0.000702593589492489, 0.000699350996796351, 0.000696137907440488, 0.000692953921890907, 
			0.000689798647783503, 0.000686671699764097, 0.000683572699332736, 0.000680501274692121, 
			0.000677457060600037, 0.000674439698225665, 0.000671448835009651, 0.000668484124527821, 
			0.000665545226358439, 0.000662631805952884, 0.000659743534509663, 0.000656880088851649, 
			0.000654041151306445, 0.000651226409589793, 0.000648435556691931, 0.000645668290766811, 
			0.000642924315024093, 0.000640203337623841, 0.00063750507157384, 0.00063482923462945, 
			0.000632175549195936, 0.000629543742233196, 0.000626933545162821, 0.000624344693777421, 
			0.000621776928152146, 0.000619229992558357, 0.000616703635379365])

class Params: 
	'''
	Disease parameters 
	'''
	def __init__(self, unit = 26): 
		self.init_prev = 0.05
		self.pInf = 0.135
		self.pCondom = 0.44
		self.redCondom = 0.6
		durI = 1 / 2 # annual scale
		self.pRec = 1 - np.exp(- 1 / (durI * unit))
		rScr = 0.3 # annual acale
		self.pScr = 1 - np.exp(np.log(1 - rScr) / unit)
		self.pContact_PN = 0.49
		self.pContact_ept = 0.7
		self.pContact_tr = 0.7
		self.p_treat_PN = 0.71
		self.p_treat_ept = 0.79
		self.p_treat_tr = 0.79
		self.max_contact = 360 # annual scale
		self.max_contact = np.round(self.max_contact / unit)
		self.max_ept = 6000 # annual scale
		self.max_ept = np.round(self.max_ept / unit)
		self.alpha = 1
		self.cMedicine = np.mean([46, 39, 45, 45, 97, 86, 51, 56])
		self.cInvestigate = 120
		self.cTest = np.mean([117, 110, 70, 70, 183, 122, 70, 70])
		self.n_cluster = 5
		self.q = 0.99 # multiplier of the utility of the infected 
		self.discount_rate = 0.03 # annual scale
		self.discount_rate = self.discount_rate / unit
'''
class ParamAdjust(Params): 
	def __init__(self, unit = 26): 
		Params.__init__(self)
		self.pScr = 1 - np.exp(np.log(1 - self.rScr) / unit)
		self.pRec = 1 - np.exp(- 1 / (self.durI * unit))
		self.max_contact = np.round(self.max_contact / unit)
		self.max_ept = np.round(self.max_ept / unit)
		self.discount_rate = self.discount_rate / unit
'''

class SexBehavior: 
	def __init__(self, unit = 14):
		unit_vec = np.array([np.round(30 / unit), np.round(6 * 30 / unit), np.round(6 * 30 / unit), \
			np.round(12 * 30 / unit), np.round(12 * 30 / unit)]).astype(int)
		self.dur = np.arange(np.sum(unit_vec)) 
		raw_dist = np.array([0.558, 0.216, 0.073, 0.074, 0.023])
		convert_dist = np.repeat(raw_dist / unit_vec, unit_vec)
		self.dur_dist = convert_dist / np.sum(convert_dist)
