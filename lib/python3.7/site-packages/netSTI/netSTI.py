import numpy as np
import timeit
import netSTI.mydata as data
import netSTI.copula as copula
import netSTI.netgen as ngen
import netSTI.disease_policy as dp

class MyError(Exception): 
	def __init__(self, arg): 
		self.arg = arg


def SIR_net_generator(run, Npop, years = 20, days = 14, 
	graph = "random", pEFoI = (1 / 5000) / 2, independent = True, corr_scr = True, base_case = True, 
	trend = False, analysis_window = 10, output_netsum = False, output_net = False): 

	'''
	Npop = 5000
	years = 5
	days = 14 # 14 days; bi-weekly time step
	run = 1
	graph = "power_law"
	pEFoI =  (1 / 5000) / 2
	independent = False
	analysis_window = 2

	# 4 strategies: do nothing, EPT, contact tracing_degree (contact high degree nodes first), contact tracing_chronology (first come, first serve.)
	'''

	degree = data.SexBehavior().degree
	degree_dist = data.SexBehavior().degree_dist
	mean_degree = np.sum(degree * degree_dist)
	Ndegree = mean_degree * years
	unit_per_year = int(365 / days)
	time_horizon = unit_per_year * years
	n_cluster = data.Params(unit_per_year).n_cluster
	pScr = data.Params(unit_per_year).pScr

	ID = np.arange(Npop)
	ID_cluster = (np.floor(ID / (Npop/n_cluster)) + 1).astype(int)

	np.random.seed(run)

	rel_hist = ngen.graph_generator(graph, ID, Npop, Ndegree, time_horizon, years, \
		ID_cluster = ID_cluster, pCluster = 0.99, independent = independent)
	
	t_begin = (time_horizon - unit_per_year * analysis_window)

	if output_netsum == True: 
		net_out = ngen.SumNet(rel_hist, Npop, time_horizon, t_begin).sumarize_net_result()
		return net_out

	if output_net == True: 
		return rel_hist

	# only keep network in the analysis window and shift the time 
	rel_hist[:, 2] = rel_hist[:, 2] - t_begin
	rel_hist[:, 3] = rel_hist[:, 3] - t_begin
	# update time horizon
	time_horizon  = time_horizon - t_begin

	# tmp_name, tmp_count = np.unique(rel_hist[np.where(rel_hist[:, 3] >= 0), :2], return_counts = True) 
	# count_all = np.zeros(Npop)
	count_all, p_iso = ngen.SumNet(rel_hist, Npop, time_horizon, t_begin).calc_degree_over_a_window()

	seed_ix = dp.gen_inf_id_from_external(count_all, Npop, pEFoI, ID_cluster, graph, \
		time_horizon, inf_independent = False)

	scr_schedule = dp.make_screening_schedule(rel_hist, time_horizon, Npop, \
		unit_per_year, pScr, corr_scr = corr_scr)

	pContact_PN = 0.49
	pContact_ept = 0.7
	pContact_tr = 0.7
	p_treat_PN = 0.71
	p_treat_ept = 0.79
	p_treat_tr = 0.79

	if base_case == True: 
		null_out = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
			scr_schedule, count_all, strategy = 'null', trend = trend, \
			pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
			p_treat_PN = p_treat_PN, p_treat_ept = p_treat_ept, p_treat_tr = p_treat_tr)

		pn_out = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
			scr_schedule, count_all, strategy = 'PN', trend = trend, \
			pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
			p_treat_PN = p_treat_PN, p_treat_ept = p_treat_ept, p_treat_tr = p_treat_tr)

		ept_out = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
			scr_schedule, count_all, strategy = 'EPT', trend = trend, \
			pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
			p_treat_PN = p_treat_PN, p_treat_ept = p_treat_ept, p_treat_tr = p_treat_tr)

		tr_out = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
			scr_schedule, count_all, strategy = 'tracing', trend = trend, \
			pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
			p_treat_PN = p_treat_PN, p_treat_ept = p_treat_ept, p_treat_tr = p_treat_tr)


	else: 
		null_out = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
			scr_schedule, count_all, strategy = 'null', trend = trend, \
			pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
			p_treat_PN = p_treat_PN, p_treat_ept = p_treat_ept, p_treat_tr = p_treat_tr)

		param_v = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.71, 0.79, 0.8, 0.9]	
		pn_out = {}

		for v in param_v:
			pn_out[str(v)] = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
				scr_schedule, count_all, strategy = 'PN', trend = trend, \
				pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
				p_treat_PN = v, p_treat_ept = p_treat_ept, p_treat_tr = p_treat_tr)

		ept_out = {}
		for v in param_v: 
			ept_out[str(v)] = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
				scr_schedule, count_all, strategy = 'EPT', trend = trend, \
				pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
				p_treat_PN = p_treat_PN, p_treat_ept = v, p_treat_tr = p_treat_tr)

		tr_out = {}
		for v in param_v: 
			tr_out[str(v)] = dp.implement_strategy(ID, rel_hist, Npop, time_horizon, unit_per_year, seed_ix, \
				scr_schedule, count_all, strategy = 'tracing', trend = trend, \
				pContact_PN = pContact_PN, pContact_ept = pContact_ept, pContact_tr = pContact_tr, \
				p_treat_PN = p_treat_PN, p_treat_ept = p_treat_ept, p_treat_tr = v)

	return {"run": run, "null": null_out, "pn": pn_out, "ept": ept_out, "tracing": tr_out} 




