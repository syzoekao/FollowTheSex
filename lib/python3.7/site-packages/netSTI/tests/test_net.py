import numpy as np
import copy
import timeit
import netSTI.net as net
import netSTI.mydata as data
import pytest


Npop = 5000
years = 10
days = 14 # 14 days; bi-weekly time step
# graph_function = net.random_graph_generator
strategy = "null" 
meanActs = 27


Ndegree = 4 * years
unit_per_year = int(365 / days)
time_horizon = unit_per_year * years
acts = meanActs / unit_per_year

init_prev, pInf, pCondom, redCondom, pScr, pRec, \
pContact_PN, pContact_ept, pContact_tr, p_treat_PN, p_treat_ept, \
max_contact, max_ept, alpha, cMedicine, cInvestigate, cTest, \
n_cluster, q, discount_rate = net.get_params(unit_per_year)

dur = data.SexBehavior(days).dur
dur_dist = data.SexBehavior(days).dur_dist

init_inf = int(Npop * init_prev)
ID = np.arange(Npop)
S = np.ones(Npop)
I = np.zeros(Npop)
T = np.zeros(Npop) # this state is only for recording time of treatment

ID_cluster = (np.floor(ID / (Npop/n_cluster)) + 1).astype(int)
init_select = np.where(ID_cluster == 1)[0]
infID = np.sort(np.random.choice(init_select, init_inf, replace = False))
I[infID] = 1
S[infID] = 0

aa = timeit.default_timer()
rr = net.random_graph_generator(ID, Npop, Ndegree, dur, dur_dist, time_horizon)
print(timeit.default_timer() - aa)

aa = timeit.default_timer()
rr = net.community_graph_generator(ID, Npop, Ndegree, ID_cluster, dur, dur_dist, time_horizon)
print(timeit.default_timer() - aa)

aa = timeit.default_timer()
rr = net.power_law_graph_generator(ID, Npop, Ndegree, dur, dur_dist, time_horizon)
print(timeit.default_timer() - aa)



def test_transmit_specific_hiv():
	net.period_Relation(N, dur, dur_dist, time_horizon)
