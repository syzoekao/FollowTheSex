import numpy as np
import timeit
import netSTI.netgen as ngen
import netSTI.mydata as data
import netSTI.copula as copula
import pytest


graph = "community"
independent = False

if graph == 'community':
	com = True
else: 
	com = False

Npop = 5000
years = 5
days = 14 
analysis_window = 2

degree = data.SexBehavior().degree
degree_dist = data.SexBehavior().degree_dist
mean_degree = np.sum(degree * degree_dist)
Ndegree = mean_degree * years
unit_per_year = int(365 / days)
time_horizon = unit_per_year * years
n_cluster = data.Params(unit_per_year).n_cluster

t_begin = (time_horizon - unit_per_year * analysis_window)

ID = np.arange(Npop)
ID_cluster = (np.floor(ID / (Npop/n_cluster)) + 1).astype(int)

cop = copula.CopulaDist(Npop, graph = graph, independent = independent)

if graph in ['random', 'community']: 
	gen_dd = cop.get_degree_poisson(Ndegree)
if graph == 'power_law': 
	gen_dd = cop.get_degree_power_law()
if graph == 'empirical': 
	gen_dd = cop.get_dd_empirical(years)

gen_avg_dur = cop.get_avg_duration()


def test_input_gen_adj_matrix_from_dd():
	with pytest.raises(TypeError) as e: 
		assert ngen.gen_adj_matrix_from_dd(ID, Npop, gen_dd, community = "community", \
			ID_cluster = None, pCluster = 0.99)
	assert str(e.value) == 'ID_cluster must be a numpy array'

	with pytest.raises(TypeError) as e: 
		assert ngen.gen_adj_matrix_from_dd(ID, Npop, gen_dd, community = "community", \
			ID_cluster = ID_cluster, pCluster = 0)
	assert str(e.value) == 'pCluster must be numeric (float)'

outMat = ngen.gen_adj_matrix_from_dd(ID, Npop, gen_dd, community = com, \
	ID_cluster = ID_cluster, pCluster = 0.99)

def test_output_gen_adj_matrix_from_dd():
	assert np.allclose(outMat, outMat.T)
	assert all(np.diagonal(outMat) == 0)
	assert all(np.sum(outMat, axis = 1) > 0)

def test_period_Relation():
	agent_ID, part_ID = np.where(outMat == 1)
	dum = agent_ID < part_ID
	agent_ID = agent_ID[dum]
	part_ID = part_ID[dum]

	r_beg, r_end = ngen.period_Relation(agent_ID, part_ID, gen_avg_dur, time_horizon)

	assert all(r_beg <= r_end)
	assert all(r_beg < time_horizon)
	assert all(r_end >= 0)

def test_generate_edge_list_array(): 
	el = ngen.generate_edge_list_array(outMat, gen_avg_dur, time_horizon)
	assert el.shape[1] == 4
	assert el.shape[0] == (np.sum(outMat) / 2)


el = ngen.graph_generator(graph, ID, Npop, Ndegree, time_horizon, years, \
	ID_cluster = ID_cluster, pCluster = 0.99, independent = True)

def test_generate_edge_list_array(): 
	assert el.shape[1] == 4
	assert all(el[:, 2] <= el[:, 3])
	assert all(el[:, 2] < time_horizon)
	assert all(el[:, 3] >= 0)

def test_SumNet(): 
	sn = ngen.SumNet(el, Npop, time_horizon, t_begin)
	dd = sn.calc_avg_degree_per_step()
	assert dd.shape[0] == time_horizon

	dd = sn.calc_degree_over_a_window()
	assert dd.shape[0] == Npop
	assert np.mean(dd) < 10 

	nr = sn.sumarize_net_result()

	tmp_ix, tmp_n = np.unique(el[:, :2], return_counts = True)
	assert nr['deg_all'] == np.sum(tmp_n) / Npop


